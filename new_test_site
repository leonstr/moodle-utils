#!/bin/bash
# Create a Moodle site on a CentOS server running Apache and MySQL/MariaDB.
# PHP and MySQL/MariaDB must be alread installed and configured.
# Leon Stringer <leon@priorsvle.com>
local_repo=/usr/share/repos/moodle
branch=MOODLE_405_STABLE
upstream_repo=git://git.moodle.org/moodle.git
tag=""
verbose=0
OPTIND=1

function show_help () {
	cat << EOF
Usage: new_test_site [[-b branch_ver] | [-t tag]] [-g git_repo] domain-name

 -b branch_ver Optional major Moodle version, e.g. 35 for Moodle 3.5.
               If not specified $branch is used.  Minimum: 25 (for
               Moodle 2.5).  Cannot be used with -t.

 -t tag        Optional Moodle minor version, e.g. v3.5.1  Cannot be
               used with -b.

 -g git_repo   Optional upstream Git repository to use.  By default
               $upstream_repo is used.  If the source code
               directory is present this is used, avoiding Git clone.

 -v            Verbose output.

Examples:
    new_test_site moodle1.example.com

    new_test_site -b 35 -g https://github.com/moodle/moodle.git \\
                moodle2.example.com

    new_test_site -t v3.6.2 moodle3.example.com

EOF
}

function log () {
    if [ "$verbose" -eq "1" ]; then
        echo "$@"
    fi
}

function dbtype () {
    local dbname=$1
    local dbpass=$2
    dbversion=`mysql -u $dbname -p$dbpass -BN --execute="SELECT VERSION()" 2> /dev/null`

    if [[ $dbversion == *"MariaDB" ]]; then
        dbtype="mariadb"
    else
        dbtype="mysqli"
    fi
}

while getopts "g:b:t:h?v" opt; do
	case "$opt" in
		b) branch=MOODLE_${OPTARG}_STABLE
			;;
		g) upstream_repo=$OPTARG
			;;
		t) tag=$OPTARG
			regex="v([0-9]+)\.([0-9]+)\."

			if [[ $tag =~ $regex ]]; then
				branch=MOODLE_${BASH_REMATCH[1]}${BASH_REMATCH[2]}_STABLE
			else
				>&2 echo "Error: Tag $tag does not match 'vX.Y.Z'."
				exit 1
			fi
			;;
		h|\?) show_help
			exit 0
			;;
		v) verbose=1
			;;
	esac
done

shift $((OPTIND-1))

if [ "$#" -ne 1 ]; then
	>&2 echo "Error: Missing domain name."
	exit 1
fi

which openssl > /dev/null 2>&1

if [ "$?" -ne "0" ]; then
	>&2 echo "Error: openssl not found on path"
	exit 1
fi

apache_conf_dir=/etc/httpd/conf.d
cert_dir=/etc/pki/tls/certs
key_dir=/etc/pki/tls/private
www_user=apache
www_service=httpd
key_file_mode=600
key_owner_g=root
php_fpm_conf=/etc/php-fpm.d/www.conf
os_id=`grep -h "^ID=" /etc/*-release | cut -d'=' -f 2`

if [ "$os_id" == "debian" ]; then
	log "Using file system locations for Debian."
	apache_conf_dir=/etc/apache2/sites-enabled
	cert_dir=/etc/ssl/certs
	key_dir=/etc/ssl/private
	www_user=www-data
	www_service=apache2
	key_file_mode=640
	key_owner_g=ssl-cert
else
	log "Using file system locations for CentOS/RHEL/Fedora."
fi

if [ -f "$php_fpm_conf" ]; then		# Is there a PHP-FPM config file?
	 # Then attempt to read the user setting.
	fpm_user=`grep -E "^user = [^;\s]+" /etc/php-fpm.d/www.conf | sed 's/^user\s\+=\s\+//'`

	if [ "$?" -eq "0" ] && [ ! -z "$fpm_user" ]; then
		www_user=$fpm_user
	fi
fi

log "PHP appears to be accessing files as user '$www_user'."

domain_name=$1
conf_file=$apache_conf_dir/$domain_name.conf
cert_file=$cert_dir/$domain_name.crt
key_file=$key_dir/$domain_name.key
sitedir=/var/www/$domain_name
moodle=$sitedir/moodle
dataroot=$sitedir/moodledata
dbname=${domain_name//./_}
dbpass=`openssl rand -base64 12`	# https://unix.stackexchange.com/a/306107

lang=${LANG:0:2}
log "Language detected: $lang"

if [ -e "$conf_file" ]; then
	>&2 echo "Error: $conf_file already exists."
	exit 1
fi

if [ -e "$cert_file" ]; then
	>&2 echo "Error: $cert_file already exists."
	exit 1
fi

if [ -e "$key_file" ]; then
	>&2 echo "Error: $key_file already exists."
	exit 1
fi

log "Creating https://$domain_name"

mysql -u root -p --execute="CREATE DATABASE \`$dbname\` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;CREATE USER '$dbname'@'localhost' IDENTIFIED BY '$dbpass';GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,CREATE TEMPORARY TABLES,DROP,INDEX,ALTER ON \`$dbname\`.* TO '$dbname'@'localhost'"

if [ "$?" -ne "0" ]; then
	>&2 echo "Error: Unable to create database or database user."
	exit 1
fi

if [ -d "$sitedir" ]; then
	mkdir $dataroot
else
	mkdir $sitedir $dataroot
fi

if [ "$?" -ne "0" ]; then
	>&2 echo "Error: Unable to create directories."
	exit 1
fi

chown $www_user: $dataroot
selinux_status=`getenforce 2> /dev/null`

if [ "$?" -eq "0" ] && [ "$selinux_status" == "Enforcing" ]; then
	semanage fcontext -a -t httpd_sys_rw_content_t "$dataroot"
	restorecon -v "$dataroot" > /dev/null
fi

 # If there's a moodle dir, assume this is a source code dir.  If this is an
 # existing site the config.php will stop install.php (and if there's an
 # existing database with the same name then the CREATE DATABASE would have
 # failed previously).
if [ ! -d "$moodle" ]; then
	git_clone_args=("-q")

	 # Is there a local Git repo for Moodle?
	if [ -d "$local_repo" ]; then
		git_clone_args+=("--reference" "$local_repo")
	fi

	git_clone_args+=("$upstream_repo")

	if [ ! -z "$tag" ]; then
		git_clone_args+=("--branch" $tag)
	else
		git_clone_args+=("--branch" $branch)
	fi

	git_clone_args+=("$moodle")
	git clone ${git_clone_args[@]}
fi

if [ "$?" -ne "0" ]; then
	>&2 echo "Error: Git clone failed."
	exit 1
fi

install_args=("--wwwroot=https://$domain_name" "--dbname=$dbname" "--dbuser=$dbname" "--dbpass=$dbpass" "--fullname=Test Site" "--shortname=Home" "--adminpass=Password-1" "--agree-license" "--non-interactive" "--lang=$lang")

# Initialise $dbtype to mariadb or mysqli as required
dbtype $dbname $dbpass

 # dbtype mariadb introduced with Moodle 2.6
if [ "$branch" == "MOODLE_25_STABLE" ]; then
	dbtype="mysqli"
fi

install_args+=("--dbtype=$dbtype")

 # adminemail introduced in Moodle 2.9, check version is not older.
old_versions="MOODLE_2[5-8]_STABLE"

if [[ ! "$branch" =~ $old_versions ]]; then
	install_args+=("--adminemail=admin@example.com")
fi

installoutput=$(mktemp -t "$(basename $0).XXXXXXXXXX")

php -f $sitedir/moodle/admin/cli/install.php -- "${install_args[@]}" > $installoutput

if [ "$?" -ne "0" ]; then
	>&2 echo "Error: Install command failed."
    tail $installoutput
    rm -f $installoutput
	exit 1
fi

rm -f $installoutput
chown $www_user $sitedir/moodle/config.php

openssl req -x509 -newkey rsa:4096 -keyout $key_file -out $cert_file -days 720 -nodes -subj "/CN=$domain_name" > /dev/null

if [ "$?" -ne "0" ]; then
	>&2 echo "Error: Unable to create self-signed certificates."
	exit 1
fi

chmod $key_file_mode $key_file
chown root:$key_owner_g $key_file

cat << EOF > $conf_file
<VirtualHost *:443>
    ServerName $domain_name
    DocumentRoot $sitedir/moodle
    SSLEngine on
    SSLCertificateFile $cert_file
    SSLCertificateKeyFile $key_file
</VirtualHost>
EOF

if [ "$?" -ne "0" ]; then
	>&2 echo "Error: Unable to create Apache config file."
	exit 1
fi

apachectl configtest > /dev/null 2>&1

if [ "$?" -ne "0" ]; then
	>&2 echo "Error: Apache configuration error."
	exit 1
fi

systemctl reload $www_service

if [ "$?" -ne "0" ]; then
	>&2 echo "Error: Error reloading Apache."
	exit 1
fi

log "Completed successfully."
